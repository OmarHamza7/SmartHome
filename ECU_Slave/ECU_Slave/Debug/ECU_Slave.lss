
ECU_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097d  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000425  00000000  00000000  00001337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fb  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_SetPinDirection>:
#include "Dio_Reg.h"
#include "Utilites.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <Dio_SetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <Dio_SetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <Dio_SetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <Dio_SetPinDirection+0xea>
	{
		if(Direction==OUTPUT)
  78:	41 30       	cpi	r20, 0x01	; 1
  7a:	a1 f5       	brne	.+104    	; 0xe4 <Dio_SetPinDirection+0x78>
		{
			switch(GroupNo)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	89 f0       	breq	.+34     	; 0xa2 <Dio_SetPinDirection+0x36>
  80:	28 f0       	brcs	.+10     	; 0x8c <Dio_SetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	c9 f0       	breq	.+50     	; 0xb8 <Dio_SetPinDirection+0x4c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	11 f1       	breq	.+68     	; 0xce <Dio_SetPinDirection+0x62>
  8a:	08 95       	ret
			{
			case GroupA: SET_BIT(DDRA, PinNo); break;
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <Dio_SetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <Dio_SetPinDirection+0x28>
  9c:	82 2b       	or	r24, r18
  9e:	8a bb       	out	0x1a, r24	; 26
  a0:	08 95       	ret
			case GroupB: SET_BIT(DDRB, PinNo); break;
  a2:	27 b3       	in	r18, 0x17	; 23
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <Dio_SetPinDirection+0x42>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <Dio_SetPinDirection+0x3e>
  b2:	82 2b       	or	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
			case GroupC: SET_BIT(DDRC, PinNo); break;
  b8:	24 b3       	in	r18, 0x14	; 20
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Dio_SetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <Dio_SetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
			case GroupD: SET_BIT(DDRD, PinNo); break;
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <Dio_SetPinDirection+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <Dio_SetPinDirection+0x6a>
  de:	82 2b       	or	r24, r18
  e0:	81 bb       	out	0x11, r24	; 17
  e2:	08 95       	ret
			}
		}
		else if(Direction==INPUT)
  e4:	41 11       	cpse	r20, r1
  e6:	37 c0       	rjmp	.+110    	; 0x156 <Dio_SetPinDirection+0xea>
		{
			switch(GroupNo)
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 f0       	breq	.+36     	; 0x110 <Dio_SetPinDirection+0xa4>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <Dio_SetPinDirection+0x8c>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	d9 f0       	breq	.+54     	; 0x128 <Dio_SetPinDirection+0xbc>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	29 f1       	breq	.+74     	; 0x140 <Dio_SetPinDirection+0xd4>
  f6:	08 95       	ret
			{
			case GroupA: CLR_BIT(DDRA, PinNo); break;
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Dio_SetPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <Dio_SetPinDirection+0x94>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
			case GroupB: CLR_BIT(DDRB, PinNo); break;
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <Dio_SetPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Dio_SetPinDirection+0xac>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
			case GroupC: CLR_BIT(DDRC, PinNo); break;
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Dio_SetPinDirection+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <Dio_SetPinDirection+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
			case GroupD: CLR_BIT(DDRD, PinNo); break;
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Dio_SetPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Dio_SetPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <main>:

int main(void)
{
	
	// setting output Leds
		SPI_initSlave();
 158:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <SPI_initSlave>
		Dio_SetPinDirection(GroupA,PIN0,OUTPUT);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
		Dio_SetPinDirection(GroupA,PIN1,OUTPUT);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	    Dio_SetPinDirection(GroupA,PIN2,OUTPUT);	
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
   	}
   	
   	void Tog_led2()  // if led 2 off turn it on and vice verse 
   	{
	   		
	   TOG_BIT(PORTA,1);	
 17a:	d2 e0       	ldi	r29, 0x02	; 2
   u8 Received_Date ;
   
   	void Tog_led1()  // if led 1 off turn it on and vice verse 
   	{
	   	
	   	TOG_BIT(PORTA,0);
 17c:	c1 e0       	ldi	r28, 0x01	; 1
   
   
   	void Tog_led3()   // if led 3 off turn it on and vice verse 
   	{
	   	
	   	TOG_BIT(PORTA,2);
 17e:	14 e0       	ldi	r17, 0x04	; 4
   	}
   	
   
    while (1) 
    {
		Received_Date=SPI_recieveByte();  // data coming from Master ECU to the Slave
 180:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_recieveByte>
		
		
		// classifying the received data and making the action upon the client demands 
		
			if (Received_Date=='a')
 184:	81 36       	cpi	r24, 0x61	; 97
 186:	21 f4       	brne	.+8      	; 0x190 <main+0x38>
   u8 Received_Date ;
   
   	void Tog_led1()  // if led 1 off turn it on and vice verse 
   	{
	   	
	   	TOG_BIT(PORTA,0);
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	8c 27       	eor	r24, r28
 18c:	8b bb       	out	0x1b, r24	; 27
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <main+0x28>
		
			if (Received_Date=='a')
			Tog_led1();
			

			if (Received_Date=='b')
 190:	82 36       	cpi	r24, 0x62	; 98
 192:	21 f4       	brne	.+8      	; 0x19c <main+0x44>
   	}
   	
   	void Tog_led2()  // if led 2 off turn it on and vice verse 
   	{
	   		
	   TOG_BIT(PORTA,1);	
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	8d 27       	eor	r24, r29
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	f2 cf       	rjmp	.-28     	; 0x180 <main+0x28>

			if (Received_Date=='b')
			Tog_led2();
			
			
			if (Received_Date=='c')
 19c:	83 36       	cpi	r24, 0x63	; 99
 19e:	81 f7       	brne	.-32     	; 0x180 <main+0x28>
   
   
   	void Tog_led3()   // if led 3 off turn it on and vice verse 
   	{
	   	
	   	TOG_BIT(PORTA,2);
 1a0:	8b b3       	in	r24, 0x1b	; 27
 1a2:	81 27       	eor	r24, r17
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	ec cf       	rjmp	.-40     	; 0x180 <main+0x28>

000001a8 <SPI_initSlave>:
}
void SPI_sendByte(u8 data)
{
	SPDR = data; //send data by SPI
	while(GET_BIT(SPSR, 7)==0); //wait until SPI interrupt flag=1 (data is sent correctly)
}
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	67 e0       	ldi	r22, 0x07	; 7
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
 1d0:	6e 9a       	sbi	0x0d, 6	; 13
 1d2:	08 95       	ret

000001d4 <SPI_recieveByte>:
u8 SPI_recieveByte(void)
{
	while(GET_BIT(SPSR, 7)==0); //wait until SPI interrupt flag=1(data is receive correctly)
 1d4:	77 9b       	sbis	0x0e, 7	; 14
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <SPI_recieveByte>
	return SPDR; //return the received byte from SPI data register
 1d8:	8f b1       	in	r24, 0x0f	; 15
}
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
